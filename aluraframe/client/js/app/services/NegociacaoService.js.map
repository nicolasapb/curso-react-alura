{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","resolve","reject","getConnection","connection","dao","adiciona","listaTodos","negs","apagaTodos","listaAtual","obterNegociacoes","filter","some","n","isEquals","v"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;IAEaA,iB,WAAAA,iB;AAET,iCAAc;AAAA;;AACV,aAAKC,KAAL,GAAa,8BAAb;AACH;;;;2CAEkB;AACf,mBAAOC,QAAQC,GAAR,CAAY,CACf,KAAKC,wBAAL,EADe,EAEf,KAAKC,gCAAL,EAFe,EAGf,KAAKC,iCAAL,EAHe,CAAZ,EAKPC,IALO,CAKF,oBAAY;AACb,oBAAMC,cAAcC,SAASC,MAAT,CAAgB,UAACC,KAAD,EAAQC,OAAR;AAAA,2BAAoBD,MAAME,MAAN,CAAaD,OAAb,CAApB;AAAA,iBAAhB,EAA2D,EAA3D,CAApB;AACA,uBAAOJ,WAAP;AACH,aARM,EAQJM,KARI,CAQE,gBAAQ;AAAE,sBAAM,IAAIC,KAAJ,CAAUC,IAAV,CAAN;AAAuB,aARnC,CAAP;AASH;;;mDAE0B;AACvB,mBAAO,KAAKf,KAAL,CAAWgB,GAAX,CAAe,oBAAf,EACFV,IADE,CACG;AAAA,uBAAeC,YAAYU,GAAZ,CAAgB;AAAA,2BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iBAAhB,CAAf;AAAA,aADH,EAEFV,KAFE,CAEI,gBAAQ;AACXW,wBAAQC,GAAR,CAAYV,IAAZ;AACA,sBAAM,IAAID,KAAJ,CAAU,iDAAV,CAAN;AACH,aALE,CAAP;AAMH;;;2DAEkC;AAC/B,mBAAO,KAAKd,KAAL,CAAWgB,GAAX,CAAe,sBAAf,EACFV,IADE,CACG;AAAA,uBAAeC,YAAYU,GAAZ,CAAgB;AAAA,2BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iBAAhB,CAAf;AAAA,aADH,EAEFV,KAFE,CAEI,gBAAQ;AACXW,wBAAQC,GAAR,CAAYV,IAAZ;AACA,sBAAM,IAAID,KAAJ,CAAU,0DAAV,CAAN;AACH,aALE,CAAP;AAMH;;;4DAEmC;AAChC,mBAAO,KAAKd,KAAL,CAAWgB,GAAX,CAAe,uBAAf,EACFV,IADE,CACG;AAAA,uBAAeC,YAAYU,GAAZ,CAAgB;AAAA,2BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iBAAhB,CAAf;AAAA,aADH,EAEFV,KAFE,CAEI,gBAAQ;AACXW,wBAAQC,GAAR,CAAYV,IAAZ;AACA,sBAAM,IAAID,KAAJ,CAAU,wDAAV,CAAN;AACH,aALE,CAAP;AAMH;;;iCAEQY,U,EAAY;AACjB,mBAAO,IAAIzB,OAAJ,CAAY,UAAC0B,OAAD,EAAUC,MAAV,EAAqB;AACpC,qDACKC,aADL,GAEKvB,IAFL,CAEU;AAAA,2BAAc,iCAAkBwB,UAAlB,CAAd;AAAA,iBAFV;AAGI;AAHJ,iBAIKxB,IAJL,CAIU;AAAA,2BAAOyB,IAAIC,QAAJ,CAAaN,UAAb,CAAP;AAAA,iBAJV,EAKKpB,IALL,CAKU;AAAA,2BAAcqB,QAAQD,UAAR,CAAd;AAAA,iBALV,EAMKb,KANL,CAMW;AAAA,2BAAQe,OAAOb,IAAP,CAAR;AAAA,iBANX;AAOH,aARM,CAAP;AASH;;;gCAEO;AACJ,mBAAO,IAAId,OAAJ,CAAY,UAAC0B,OAAD,EAAUC,MAAV,EAAqB;AACpC,qDACKC,aADL,GAEKvB,IAFL,CAEU;AAAA,2BAAc,iCAAkBwB,UAAlB,CAAd;AAAA,iBAFV,EAGKxB,IAHL,CAGU;AAAA,2BAAOyB,IAAIE,UAAJ,CAAef,UAAf,CAAP;AAAA,iBAHV,EAIKZ,IAJL,CAIU;AAAA,2BAAQqB,QAAQO,IAAR,CAAR;AAAA,iBAJV,EAKKrB,KALL,CAKW;AAAA,2BAAQe,OAAOb,IAAP,CAAR;AAAA,iBALX;AAMH,aAPM,CAAP;AAQH;;;gCAEO;AACJ,mBAAO,IAAId,OAAJ,CAAY,UAAC0B,OAAD,EAAUC,MAAV,EAAqB;AACpC,qDACKC,aADL,GAEKvB,IAFL,CAEU;AAAA,2BAAc,iCAAkBwB,UAAlB,CAAd;AAAA,iBAFV,EAGKxB,IAHL,CAGU;AAAA,2BAAOyB,IAAII,UAAJ,EAAP;AAAA,iBAHV,EAIK7B,IAJL,CAIU;AAAA,2BAAMqB,SAAN;AAAA,iBAJV,EAKKd,KALL,CAKW;AAAA,2BAAQe,OAAOb,IAAP,CAAR;AAAA,iBALX;AAMH,aAPM,CAAP;AAQH;;;gCAEOqB,U,EAAY;AAChB,mBAAO,KAAKC,gBAAL,GACF/B,IADE,CACG;AAAA,uBAAQ4B,KAAKI,MAAL,CAAY;AAAA,2BAAK,CAACF,WAAWG,IAAX,CAAgB;AAAA,+BAAKC,EAAEC,QAAF,CAAWC,CAAX,CAAL;AAAA,qBAAhB,CAAN;AAAA,iBAAZ,CAAR;AAAA,aADH,EAEF7B,KAFE,CAEI,gBAAQ;AAAE,sBAAM,IAAIC,KAAJ,CAAUC,IAAV,CAAN;AAAuB,aAFrC,CAAP;AAGH","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from \"./HttpService\";\r\nimport { ConnectionFactory } from \"./ConnectionFactory\";\r\nimport { NegociacaoDao } from \"../dao/NegociacaoDao\";\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService()\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).\r\n        then(periodos => {\r\n            const negociacoes = periodos.reduce((dados, periodo) => dados.concat(periodo), [])\r\n            return negociacoes\r\n        }).catch(erro => { throw new Error(erro) })\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        return this._http.get('negociacoes/semana')\r\n            .then(negociacoes => negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível obter as negociações da samana')\r\n            })\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        return this._http.get('negociacoes/anterior')\r\n            .then(negociacoes => negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível obter as negociações da semana anterior')\r\n            })\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        return this._http.get('negociacoes/retrasada')\r\n            .then(negociacoes => negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível obter as negociações semana retrasada')\r\n            })\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                // tbd: filtro\r\n                .then(dao => dao.adiciona(negociacao))\r\n                .then(negociacao => resolve(negociacao))\r\n                .catch(erro => reject(erro))\r\n        })\r\n    }\r\n\r\n    lista() {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.listaTodos(Negociacao))\r\n                .then(negs => resolve(negs))\r\n                .catch(erro => reject(erro))\r\n        })\r\n    }\r\n\r\n    apaga() {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.apagaTodos())\r\n                .then(() => resolve())\r\n                .catch(erro => reject(erro))\r\n        })\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n            .then(negs => negs.filter(n => !listaAtual.some(v => n.isEquals(v))))\r\n            .catch(erro => { throw new Error(erro) })\r\n    }\r\n}"]}