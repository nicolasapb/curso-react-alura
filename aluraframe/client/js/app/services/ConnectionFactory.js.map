{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbnName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createConnection","e","target","result","onsuccess","bind","onerror","console","log","error","name","c","forEach","objectStoreNames","contains","s","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,UAAU,YAAhB;AACA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AAET,iCAAc;AAAA;;AACV,cAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;;;wCAEsB;AACnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIN,UAAJ,EAAgB;AACZK,4BAAQL,UAAR;AACA;AACH;;AAED,oBAAIO,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,OAAtB,EAA+BD,OAA/B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,aAAK;AAC/BT,sCAAkBU,iBAAlB,CAAoCC,EAAEC,MAAF,CAASC,MAA7C;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAwB,aAAK;AACzB,wBAAI,CAAChB,UAAL,EAAiB;AACbA,qCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,gCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAM;AACrB,kCAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;AACH,yBAFD;AAGH;;AAEDE,4BAAQL,UAAR;AACH,iBAVD;;AAYAO,4BAAYW,OAAZ,GAAsB,aAAK;AACvBC,4BAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAHD;AAKH,aA9BM,CAAP;AA+BH;;;0CAEwB;AACrB,gBAAItB,UAAJ,EAAgB;AACZC;AACAD,6BAAa,IAAb;AACH;AACJ;;AAED;AACA;;;;0CACyBuB,C,EAAG;AACxB1B,mBAAO2B,OAAP,CAAe,aAAK;AAChB,oBAAID,EAAEE,gBAAF,CAAmBC,QAAnB,CAA4BC,CAA5B,CAAJ,EAAoCJ,EAAEK,iBAAF,CAAoBD,CAApB;AACpCJ,kBAAEM,iBAAF,CAAoBF,CAApB,EAAuB,EAAEG,eAAe,IAAjB,EAAvB;AACH,aAHD;AAIH","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes']\r\nconst version = 4\r\nconst dbnName = 'aluraframe'\r\nlet connection = null\r\nlet close = null\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error('Não é possível instancinar ConnectionFactory')\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (connection) {\r\n                resolve(connection)\r\n                return\r\n            }\r\n\r\n            let openRequest = window.indexedDB.open(dbnName, version)\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createConnection(e.target.result);\r\n            }\r\n\r\n            openRequest.onsuccess = e => {\r\n                if (!connection) {\r\n                    connection = e.target.result\r\n                    close = connection.close.bind(connection)\r\n                    connection.close = () => {\r\n                        throw new Error('Voce nao pode fechar diretamente uma conexao')\r\n                    }\r\n                }\r\n\r\n                resolve(connection)\r\n            }\r\n\r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error)\r\n                reject(e.target.error.name)\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    static closeConnection() {\r\n        if (connection) {\r\n            close()\r\n            connection = null\r\n        }\r\n    }\r\n\r\n    // c => connection\r\n    // s => store\r\n    static _createConnection(c) {\r\n        stores.forEach(s => {\r\n            if (c.objectStoreNames.contains(s)) c.deleteObjectStore(s);\r\n            c.createObjectStore(s, { autoIncrement: true });\r\n        });\r\n    }\r\n}"]}