{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbnName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createConnection","e","target","result","onsuccess","bind","onerror","console","log","error","name","c","forEach","objectStoreNames","contains","s","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAM;;AAE3B,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,UAAU,YAAhB;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIL,UAAJ,EAAgB;AACZI,gCAAQJ,UAAR;AACA;AACH;;AAED,wBAAIM,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,OAAtB,EAA+BD,OAA/B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,iBAAlB,CAAoCC,EAAEC,MAAF,CAASC,MAA7C;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAM;AACrB,sCAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH,6BAFD;AAGH;;AAEDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAKH,iBA9BM,CAAP;AA+BH;AAtCL;AAAA;AAAA,8CAwC6B;AACrB,oBAAIrB,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACH;AACJ;;AAED;AACA;;AAhDJ;AAAA;AAAA,8CAiD6BsB,CAjD7B,EAiDgC;AACxBzB,uBAAO0B,OAAP,CAAe,aAAK;AAChB,wBAAID,EAAEE,gBAAF,CAAmBC,QAAnB,CAA4BC,CAA5B,CAAJ,EAAoCJ,EAAEK,iBAAF,CAAoBD,CAApB;AACpCJ,sBAAEM,iBAAF,CAAoBF,CAApB,EAAuB,EAAEG,eAAe,IAAjB,EAAvB;AACH,iBAHD;AAIH;AAtDL;;AAAA;AAAA;AAwDH,CAhEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (() => {\r\n\r\n    const stores = ['negociacoes']\r\n    const version = 4\r\n    const dbnName = 'aluraframe'\r\n    let connection = null\r\n    let close = null\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error('Não é possível instancinar ConnectionFactory')\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                if (connection) {\r\n                    resolve(connection)\r\n                    return\r\n                }\r\n\r\n                let openRequest = window.indexedDB.open(dbnName, version)\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createConnection(e.target.result);\r\n                }\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if (!connection) {\r\n                        connection = e.target.result\r\n                        close = connection.close.bind(connection)\r\n                        connection.close = () => {\r\n                            throw new Error('Voce nao pode fechar diretamente uma conexao')\r\n                        }\r\n                    }\r\n\r\n                    resolve(connection)\r\n                }\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error)\r\n                    reject(e.target.error.name)\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n        static closeConnection() {\r\n            if (connection) {\r\n                close()\r\n                connection = null\r\n            }\r\n        }\r\n\r\n        // c => connection\r\n        // s => store\r\n        static _createConnection(c) {\r\n            stores.forEach(s => {\r\n                if (c.objectStoreNames.contains(s)) c.deleteObjectStore(s);\r\n                c.createObjectStore(s, { autoIncrement: true });\r\n            });\r\n        }\r\n    }\r\n})()"]}